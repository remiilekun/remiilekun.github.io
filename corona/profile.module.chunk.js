webpackJsonp(["profile.module"],{

/***/ "../../../../../src/app/profile/profile.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"container-fluid profile light-grey-bg py-4\">\r\n  <div class=\"loader-container\" [class.hide]=\"user && user.firstName\">\r\n    <app-material-spinner></app-material-spinner>\r\n  </div>\r\n\r\n  <div class=\"row justify-content-center align-items-center light-grey-bg\">\r\n    <div class=\"col-md-8 col-12\">\r\n      <div class=\"row\">\r\n        <div class=\"col-md-4 col-12\">\r\n          <div class=\"card profile-card\">\r\n            <div class=\"profile-card-top\">\r\n              <div class=\"profile-image-con mb-2\" (click)=\"createFile.click()\">\r\n                <img *ngIf=\"user.profilePicture !== 'url'\" class=\"img \" [src]=\"user.profilePicture\">\r\n                <img *ngIf=\"user.profilePicture === 'url'\" class=\"img \" src=\"../../assets/avatar.png\">\r\n\r\n                <div class=\"overlay\">\r\n                  <i class=\"fa fa-camera\" aria-hidden=\"true\"></i>\r\n                  <p class=\"overlay-text\"> Update profile picture</p>\r\n                  <input #createFile (change)=\"uploadProfileImage($event)\" type=\"file\" accept=\"image/*\" size=\"200KB\" name=\"image\" class=\"file-input\">\r\n                </div>\r\n              </div>\r\n\r\n\r\n              <h3 class=\"py-3 text-center profile-name mb-0\">\r\n                <span> {{user.firstName}} </span> {{user.lastName}}\r\n              </h3>\r\n            </div>\r\n\r\n            <div class=\"card-body\">\r\n\r\n              <h4 class=\"small-blue m-0\">\r\n                <b>Role</b>\r\n              </h4>\r\n              <p class=\"grey-text mb-4\"> {{getUserGroupName(user)}} </p>\r\n\r\n              <h4 class=\"small-blue m-0\">\r\n                <b>Title</b>\r\n              </h4>\r\n              <p class=\"grey-text mb-2\"> {{getTeamNames(user)}} </p>\r\n\r\n              <hr>\r\n\r\n              <h4 class=\"text-uppercase normal-font dark-grey-text\">\r\n                <b>contact info</b>\r\n              </h4>\r\n\r\n              <h4 class=\"small-blue text-uppercase mb-2 show-more\" (click)=\"contactInfoToggle()\">\r\n                <b>show {{info}}\r\n                  <i *ngIf=\"!showContact\" class=\"fa fa-angle-down\"></i>\r\n                  <i *ngIf=\"showContact\" class=\"fa fa-angle-up\"></i>\r\n                </b>\r\n              </h4>\r\n\r\n              <div *ngIf=\"showContact\">\r\n                <h4 class=\"small-blue m-0\">\r\n                  <b>Phone Number</b>\r\n                </h4>\r\n                <div class=\"md-form mb-2 clearfix\">\r\n                  <!-- <p class=\"grey-text m-0 p-0\">{{user.mobileNumber}}</p> -->\r\n                  <input type=\"text\" [disabled]=\"makePhoneEditable\" required class=\"form-control grey-text m-0 p-0 phone-field\" [class.is-invalid]=\"showError\"\r\n                    name=\"phoneNumber\" #phoneNumber [(ngModel)]=\"user.mobileNumber\" mdbActive />\r\n                  <div *ngIf=\"makePhoneEditable; else elseblock\" (click)=\"editPhoneNumber()\" class=\"phone-edit\">\r\n                    <i class=\"fa fa-pencil\"></i>\r\n                  </div>\r\n                  <ng-template #elseblock>\r\n                    <div (click)=\"editPhoneNumber()\" class=\"phone-edit\">\r\n                      <i class=\"fa fa-times\"></i>\r\n                    </div>\r\n                    <div (click)=\"updatePhoneNumber()\" class=\"phone-edit\">\r\n                      <i class=\"fa fa-check\"></i>\r\n                    </div>\r\n                  </ng-template>\r\n                </div>\r\n\r\n                <h4 class=\"small-blue m-0\">\r\n                  <b>Email</b>\r\n                </h4>\r\n                <p class=\"grey-text mb-2\"> {{user.email}} </p>\r\n\r\n                <h4 class=\"small-blue m-0\">\r\n                  <b>Country</b>\r\n                </h4>\r\n                <p class=\"grey-text mb-2\"> {{ getUserCountry(user)}} </p>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"card my-3 change-password\">\r\n            <div class=\"card-body\">\r\n              <a class=\"m-0\" (click)=\"openPasswordModal()\">\r\n                <i class=\"fa fa-user mr-2 blue-color\"></i>\r\n                <span class=\"small-blue \">\r\n                  <b>Change password</b>\r\n                </span>\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <div class=\"col-md-8 col-12\">\r\n\r\n          <div class=\"card mb-3 profile-card\">\r\n            <div class=\"profile-card-right-top\">\r\n              <div class=\"col profile-icon float-right\">\r\n                <span class=\"text-uppercase smaller-blue\">Tasks</span>\r\n                <i class=\"fa fa-user blue-color\"></i>\r\n              </div>\r\n            </div>\r\n            <div class=\"row w-100 m-0 text-center align-items-center py-3 no-pb\">\r\n\r\n\r\n              <div class=\"col-md-3 p-0 tab-link\" (click)=\"gotoTab(1)\">\r\n                <p class=\"m-0 big-grey\">{{ assignedTaskCount.getValue() }}</p>\r\n                <p class=\"m-0 text-uppercase smaller-blue\">active</p>\r\n                <div class=\"w-100 indicator\" [class.active]=\"!tab1\"></div>\r\n              </div>\r\n\r\n              <div class=\"col-md-3 p-0 tab-link\" (click)=\"gotoTab(2)\">\r\n                <p class=\"m-0 big-grey\">{{ completedTaskCount.getValue() }}</p>\r\n                <p class=\"m-0 text-uppercase smaller-blue\">archived</p>\r\n                <div class=\"w-100 indicator\" [class.active]=\"!tab2\"></div>\r\n              </div>\r\n\r\n              <div class=\"col-md-3 p-0 tab-link\" (click)=\"gotoTab(3)\">\r\n                <p class=\"m-0 big-grey\">{{ declinedTaskCount.getValue() }}</p>\r\n                <p class=\"m-0 text-uppercase smaller-blue\">inactive</p>\r\n                <div class=\"w-100 indicator\" [class.active]=\"!tab3\"></div>\r\n              </div>\r\n\r\n              <div class=\"col-md-3 p-0 tab-link\" (click)=\"gotoTab(4)\">\r\n                <p class=\"m-0 big-grey\">{{ escalatedTaskCount.getValue() }}</p>\r\n                <p class=\"m-0 text-uppercase smaller-blue\">Escalated</p>\r\n                <div class=\"w-100 indicator\" [class.active]=\"!tab4\"></div>\r\n              </div>\r\n\r\n            </div>\r\n\r\n          </div>\r\n\r\n\r\n          <div class=\"card\">\r\n            <div class=\"card-body\">\r\n              <!-- <p class=\"text-uppercase smaller-blue dark-grey-text\">active tasks</p>\r\n              <div class=\"task-body\">\r\n                 \r\n              </div> -->\r\n\r\n              <div [hidden]=\"tab1\">\r\n\r\n                <p class=\"text-uppercase smaller-blue dark-grey-text\">active tasks\r\n                  <span class=\"float-right viewAll\" (click)=\"viewAllActiveTasks()\">\r\n                    <i *ngIf=\"!viewAllStatus\" class=\"fa fa-check-square-o\" aria-hidden=\"true\"></i>\r\n                    <i *ngIf=\"viewAllStatus\" class=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n                    &nbsp; {{statusTitle}}\r\n                  </span>\r\n                </p>\r\n                <div class=\"task-body\">\r\n                  <div *ngIf=\"!viewAllStatus\">\r\n                    <table class=\"table m-0\">\r\n                      <thead>\r\n                        <tr class=\"task-row\">\r\n                          <th class=\"arrow\"></th>\r\n                          <th class=\"smaller-blue due\">\r\n                            <b>Date Due</b>\r\n                          </th>\r\n                          <th class=\"smaller-blue teams\">\r\n                            <b>Title</b>\r\n                          </th>\r\n                          <th class=\"smaller-blue desc\">\r\n                            <b>Description</b>\r\n                          </th>\r\n                          <th class=\"task-circle\"></th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <tr class=\"taskInactive\" [ngClass]=\"{'taskActive': highlightedTask === 1}\" (click)=\"toggleTask(1)\">\r\n                          <td colspan=\"5\" class=\"p-0\">\r\n                            <table cellpadding=\"0\" cellspacing=\"0\" class=\"tbl-accordion-nested\">\r\n                              <thead>\r\n                                <tr class=\"task-row task-title-bg\">\r\n                                  <th class=\"arrow\">\r\n                                    <b>\r\n                                      <i [ngClass]=\"{'fa-angle-down': highlightedTask === 1}\" class=\"fa fa-angle-right red-color\"></i>\r\n                                    </b>\r\n                                  </th>\r\n                                  <th colspan=\"3\" class=\"tbl-accordion-section small-font red-color\">\r\n                                    <b>Overdue</b>\r\n                                  </th>\r\n                                  <th class=\"task-badge\">\r\n                                    <span class=\"numberCircle text-white\">{{(activeTaskService.userTasks | async | sortTask: 'overdue').length}}</span>\r\n                                  </th>\r\n                                </tr>\r\n                              </thead>\r\n                              <tbody class=\"task-content\">\r\n                                <tr class=\"grey-text task-row\" *ngFor=\"let task of activeTaskService.userTasks | async | sortTask: 'overdue'\">\r\n                                  <td class=\"arrow\">\r\n                                    <!-- <i class=\"fa fa-angle-down blue-color\"></i> -->\r\n                                  </td>\r\n                                  <td class=\"text-center due small-font\">\r\n                                    {{task.templateFieldsValues.priorTemplate.endDateTime}}\r\n                                    <!-- {{formatTaskDate}} -->\r\n                                  </td>\r\n                                  <td class=\"teams small-font\">{{task.title}}</td>\r\n                                  <td class=\"desc small-font\">{{task.description}}</td>\r\n                                  <td class=\"task-circle small-font\">\r\n                                    <i class=\"fa fa-exclamation-circle overdue-icon task-icon\"></i>\r\n                                  </td>\r\n                                </tr>\r\n                              </tbody>\r\n                            </table>\r\n                          </td>\r\n\r\n                        </tr>\r\n\r\n                        <tr class=\"taskInactive\" [ngClass]=\"{'taskActive': highlightedTask === 2}\" (click)=\"toggleTask(2)\">\r\n                          <td colspan=\"5\" class=\"p-0\">\r\n                            <table cellpadding=\"0\" cellspacing=\"0\" class=\"tbl-accordion-nested \">\r\n                              <thead>\r\n                                <tr class=\"task-row task-title-bg\">\r\n                                  <th class=\"arrow\">\r\n                                    <i [ngClass]=\"{'fa-angle-down': highlightedTask === 2}\" class=\"fa fa-angle-right dark-grey-text\"></i>\r\n                                  </th>\r\n                                  <th colspan=\"3\" class=\"tbl-accordion-section small-font dark-grey-text\">\r\n                                    <b>Today</b>\r\n                                  </th>\r\n                                  <th class=\"task-badge\">\r\n                                    <span class=\"numberCircle text-white\">{{(activeTaskService.userTasks | async | sortTask: 'today').length}}</span>\r\n                                  </th>\r\n                                </tr>\r\n                              </thead>\r\n                              <tbody class=\"task-content\" *ngFor=\"let task of activeTaskService.userTasks | async | sortTask: 'today'\">\r\n                                <tr class=\"grey-text task-row\">\r\n                                  <td class=\"arrow\">\r\n                                    <!-- <i class=\"fa fa-angle-down blue-color\"></i> -->\r\n                                  </td>\r\n                                  <td class=\"text-center due small-font\">\r\n                                    <b>{{task.timeDiff}}</b>\r\n                                    <br/> hours\r\n                                  </td>\r\n                                  <td class=\"teams small-font\">{{task.title}}</td>\r\n                                  <td class=\"desc small-font\">{{task.description}}</td>\r\n                                  <td class=\"task-circle small-font\">\r\n                                    <i class=\"fa fa-circle assigned-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'assigned'\"></i>\r\n                                    <i class=\"fa fa-circle accepted-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'accepted'\"></i>\r\n                                    <i class=\"fa fa-circle in-progress-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'in progress'\"></i>\r\n                                    <i class=\"fa fa-circle paused-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'paused'\"></i>\r\n                                  </td>\r\n                                </tr>\r\n                              </tbody>\r\n                            </table>\r\n                          </td>\r\n\r\n                        </tr>\r\n\r\n                        <tr class=\"taskInactive\" [ngClass]=\"{'taskActive': highlightedTask === 3}\" (click)=\"toggleTask(3)\">\r\n                          <td colspan=\"5\" class=\"p-0\">\r\n                            <table cellpadding=\"0\" cellspacing=\"0\" class=\"tbl-accordion-nested\">\r\n                              <thead>\r\n                                <tr class=\"task-row task-title-bg\">\r\n                                  <th class=\"arrow\">\r\n                                    <i [ngClass]=\"{'fa-angle-down': highlightedTask === 3}\" class=\"fa fa-angle-right dark-grey-text\"></i>\r\n                                  </th>\r\n                                  <th colspan=\"3\" class=\"tbl-accordion-section small-font dark-grey-text\">\r\n                                    <b>Anytime</b>\r\n                                  </th>\r\n                                  <th class=\"task-badge\">\r\n                                    <span class=\"numberCircle text-white\">{{(activeTaskService.userTasks | async | sortTask: 'anytime').length}}</span>\r\n                                  </th>\r\n                                </tr>\r\n                              </thead>\r\n                              <tbody class=\"task-content\" *ngFor=\"let task of activeTaskService.userTasks | async | sortTask: 'anytime'\">\r\n                                <tr class=\"grey-text task-row\">\r\n                                  <td class=\"arrow\">\r\n                                    <!-- <i class=\"fa fa-angle-down blue-color\"></i> -->\r\n                                  </td>\r\n                                  <td class=\"text-center due small-font\">\r\n\r\n                                  </td>\r\n                                  <td class=\"teams small-font\">{{task.title}}</td>\r\n                                  <td class=\"desc small-font\">{{task.description}}</td>\r\n                                  <td class=\"task-circle small-font\">\r\n                                    <i class=\"fa fa-circle assigned-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'assigned'\"></i>\r\n                                    <i class=\"fa fa-circle accepted-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'accepted'\"></i>\r\n                                    <i class=\"fa fa-circle paused-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'paused'\"></i>\r\n                                    <i class=\"fa fa-circle in-progress-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'in progress'\"></i>\r\n                                  </td>\r\n                                </tr>\r\n                              </tbody>\r\n                            </table>\r\n                          </td>\r\n\r\n                        </tr>\r\n\r\n                        <tr class=\"taskInactive\" [ngClass]=\"{'taskActive': highlightedTask === 4}\" (click)=\"toggleTask(4)\">\r\n                          <td colspan=\"5\" class=\"p-0\">\r\n                            <table cellpadding=\"0\" cellspacing=\"0\" class=\"tbl-accordion-nested\">\r\n                              <thead>\r\n                                <tr class=\"task-row task-title-bg\">\r\n                                  <th class=\"arrow\">\r\n                                    <i [ngClass]=\"{'fa-angle-down': highlightedTask === 4}\" class=\"fa fa-angle-right dark-grey-text\"></i>\r\n                                  </th>\r\n                                  <th colspan=\"4\" class=\"tbl-accordion-section small-font dark-grey-text\">\r\n                                    <b>Frequent</b>\r\n                                  </th>\r\n                                  <th class=\"task-badge\">\r\n                                    <span class=\"numberCircle text-white\">{{(activeTaskService.userTasks | async | sortTask: 'frequent').length}}</span>\r\n                                  </th>\r\n                                </tr>\r\n                              </thead>\r\n                              <tbody class=\"task-content\">\r\n                                <tr class=\"grey-text task-row\" class=\"subTaskInactive\" [ngClass]=\"{'subTaskActive': subHighlightedTask === 1}\" (click)=\"toggleSubTask(1)\">\r\n                                  <td class=\"arrow task-title-bg\">\r\n                                    <!-- <i class=\"fa fa-angle-down blue-color\"></i> -->\r\n                                  </td>\r\n                                  <td colspan=\"5\" class=\"p-0\">\r\n                                    <table cellpadding=\"0\" cellspacing=\"0\" class=\"tbl-accordion-nested\">\r\n                                      <thead>\r\n                                        <tr class=\"task-row task-title-bg\">\r\n                                          <th class=\"arrow\">\r\n                                            <i [ngClass]=\"{'fa-angle-down': subHighlightedTask === 1}\" class=\"fa fa-angle-right dark-grey-text\"></i>\r\n                                          </th>\r\n                                          <th colspan=\"4\" class=\"tbl-accordion-section small-font dark-grey-text\">\r\n                                            <b>Weekly</b>\r\n                                          </th>\r\n                                          <th class=\"task-badge\">\r\n                                            <span class=\"numberCircle text-white\">{{(activeTaskService.userTasks | async | sortTask: 'weekly').length}}</span>\r\n                                          </th>\r\n                                        </tr>\r\n                                      </thead>\r\n                                      <tbody class=\"sub-task-content\" *ngFor=\"let task of activeTaskService.userTasks | async | sortTask: 'weekly'\">\r\n                                        <tr class=\"grey-text task-row\">\r\n                                          <td class=\"arrow\">\r\n                                            <!-- <i class=\"fa fa-angle-down blue-color\"></i> -->\r\n                                          </td>\r\n                                          <td class=\"text-center due small-font\">\r\n                                            {{task.templateFieldsValues.priorTemplate.endDateTime}}\r\n                                          </td>\r\n                                          <td class=\"teams small-font\">{{task.title}}</td>\r\n                                          <td class=\"desc small-font\">{{task.description}}</td>\r\n                                          <td class=\"task-circle small-font\">\r\n                                            <i class=\"fa fa-circle assigned-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'assigned'\"></i>\r\n                                            <i class=\"fa fa-circle accepted-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'accepted'\"></i>\r\n                                            <i class=\"fa fa-circle paused-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'paused'\"></i>\r\n                                            <i class=\"fa fa-circle in-progress-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'in progress'\"></i>\r\n                                          </td>\r\n                                        </tr>\r\n                                      </tbody>\r\n                                    </table>\r\n                                  </td>\r\n                                </tr>\r\n\r\n                                <tr class=\"grey-text task-row\" class=\"subTaskInactive\" [ngClass]=\"{'subTaskActive': subHighlightedTask === 2}\" (click)=\"toggleSubTask(2)\">\r\n                                  <td class=\"arrow task-title-bg\">\r\n                                    <!-- <i class=\"fa fa-angle-down blue-color\"></i> -->\r\n                                  </td>\r\n                                  <td colspan=\"5\" class=\"p-0\">\r\n                                    <table cellpadding=\"0\" cellspacing=\"0\" class=\"tbl-accordion-nested\">\r\n                                      <thead>\r\n                                        <tr class=\"task-row task-title-bg\">\r\n                                          <th class=\"arrow\">\r\n                                            <i [ngClass]=\"{'fa-angle-down': subHighlightedTask === 2}\" class=\"fa fa-angle-right dark-grey-text\"></i>\r\n                                          </th>\r\n                                          <th colspan=\"4\" class=\"tbl-accordion-section small-font dark-grey-text\">\r\n                                            <b>Monthly</b>\r\n                                          </th>\r\n                                          <th class=\"task-badge\">\r\n                                            <span class=\"numberCircle text-white\">{{(activeTaskService.userTasks | async | sortTask: 'monthly').length}}</span>\r\n                                          </th>\r\n                                        </tr>\r\n                                      </thead>\r\n                                      <tbody class=\"sub-task-content\" *ngFor=\"let task of activeTaskService.userTasks | async | sortTask: 'monthly'\">\r\n                                        <tr class=\"grey-text task-row\">\r\n                                          <td class=\"arrow\">\r\n                                            <!-- <i class=\"fa fa-angle-down blue-color\"></i> -->\r\n                                          </td>\r\n                                          <td class=\"text-center due small-font\">\r\n\r\n                                          </td>\r\n                                          <td class=\"teams small-font\">{{task.title}}</td>\r\n                                          <td class=\"desc small-font\">{{task.description}}</td>\r\n                                          <td class=\"task-circle small-font\">\r\n                                            <i class=\"fa fa-circle assigned-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'assigned'\"></i>\r\n                                            <i class=\"fa fa-circle accepted-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'accepted'\"></i>\r\n                                            <i class=\"fa fa-circle paused-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'paused'\"></i>\r\n                                            <i class=\"fa fa-circle in-progress-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'in progress'\"></i>\r\n                                          </td>\r\n                                        </tr>\r\n                                      </tbody>\r\n                                    </table>\r\n                                  </td>\r\n                                </tr>\r\n\r\n                                <tr class=\"grey-text task-row\" class=\"subTaskInactive\" [ngClass]=\"{'subTaskActive': subHighlightedTask === 3}\" (click)=\"toggleSubTask(3)\">\r\n                                  <td class=\"arrow task-title-bg\">\r\n                                    <!-- <i class=\"fa fa-angle-down blue-color\"></i> -->\r\n                                  </td>\r\n                                  <td colspan=\"5\" class=\"p-0\">\r\n                                    <table cellpadding=\"0\" cellspacing=\"0\" class=\"tbl-accordion-nested\">\r\n                                      <thead>\r\n                                        <tr class=\"task-row task-title-bg\">\r\n                                          <th class=\"arrow\">\r\n                                            <i [ngClass]=\"{'fa-angle-down': subHighlightedTask === 3}\" class=\"fa fa-angle-right dark-grey-text\"></i>\r\n                                          </th>\r\n                                          <th colspan=\"4\" class=\"tbl-accordion-section small-font dark-grey-text\">\r\n                                            <b>Quarterly</b>\r\n                                          </th>\r\n                                          <th class=\"task-badge\">\r\n                                            <span class=\"numberCircle text-white\">{{(activeTaskService.userTasks | async | sortTask: 'quarterly').length}}</span>\r\n                                          </th>\r\n                                        </tr>\r\n                                      </thead>\r\n                                      <tbody class=\"sub-task-content\" *ngFor=\"let task of activeTaskService.userTasks | async | sortTask: 'quarterly'\">\r\n                                        <tr class=\"grey-text task-row\">\r\n                                          <td class=\"arrow\">\r\n                                            <!-- <i class=\"fa fa-angle-down blue-color\"></i> -->\r\n                                          </td>\r\n                                          <td class=\"text-center due small-font\">\r\n\r\n                                          </td>\r\n                                          <td class=\"teams small-font\">{{task.title}}</td>\r\n                                          <td class=\"desc small-font\">{{task.description}}</td>\r\n                                          <td class=\"task-circle small-font\">\r\n                                            <i class=\"fa fa-circle assigned-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'assigned'\"></i>\r\n                                            <i class=\"fa fa-circle accepted-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'accepted'\"></i>\r\n                                            <i class=\"fa fa-circle paused-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'paused'\"></i>\r\n                                            <i class=\"fa fa-circle in-progress-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'in progress'\"></i>\r\n                                          </td>\r\n                                        </tr>\r\n                                      </tbody>\r\n                                    </table>\r\n                                  </td>\r\n                                </tr>\r\n                              </tbody>\r\n                            </table>\r\n                          </td>\r\n\r\n                        </tr>\r\n\r\n                        <tr class=\"taskInactive\" [ngClass]=\"{'taskActive': highlightedTask === 5}\" (click)=\"toggleTask(5)\">\r\n                          <td colspan=\"5\" class=\"p-0\">\r\n                            <table cellpadding=\"0\" cellspacing=\"0\" class=\"tbl-accordion-nested\">\r\n                              <thead>\r\n                                <tr class=\"task-row task-title-bg\">\r\n                                  <th class=\"arrow\">\r\n                                    <i [ngClass]=\"{'fa-angle-down': highlightedTask === 5}\" class=\"fa fa-angle-right dark-grey-text\"></i>\r\n                                  </th>\r\n                                  <th colspan=\"3\" class=\"tbl-accordion-section small-font dark-grey-text\">\r\n                                    <b>Other Days</b>\r\n                                  </th>\r\n                                  <th class=\"task-badge\">\r\n                                    <span class=\"numberCircle text-white\">{{(activeTaskService.userTasks | async | sortTask: 'others').length}}</span>\r\n                                  </th>\r\n                                </tr>\r\n                              </thead>\r\n                              <tbody class=\"task-content\" *ngFor=\"let task of activeTaskService.userTasks | async | sortTask: 'others'\">\r\n                                <tr class=\"grey-text task-row\">\r\n                                  <td class=\"arrow\">\r\n                                    <!-- <i class=\"fa fa-angle-down blue-color\"></i> -->\r\n                                  </td>\r\n                                  <td class=\"text-center due small-font\">\r\n                                    {{task.templateFieldsValues.priorTemplate.endDateTime}}\r\n                                  </td>\r\n                                  <td class=\"teams small-font\">{{task.title}}</td>\r\n                                  <td class=\"desc small-font\">{{task.description}}</td>\r\n                                  <td class=\"task-circle small-font\">\r\n                                    <i class=\"fa fa-circle assigned-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'assigned'\"></i>\r\n                                    <i class=\"fa fa-circle accepted-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'accepted'\"></i>\r\n                                    <i class=\"fa fa-circle paused-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'paused'\"></i>\r\n                                    <i class=\"fa fa-circle in-progress-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'in progress'\"></i>\r\n                                  </td>\r\n                                </tr>\r\n                              </tbody>\r\n                            </table>\r\n                          </td>\r\n\r\n                        </tr>\r\n\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                  <div *ngIf=\"viewAllStatus\">\r\n                    <table class=\"table m-0\">\r\n                      <thead>\r\n                        <tr class=\"task-row\">\r\n                          <th class=\"smaller-blue due text-center\">\r\n                            <b>Date Due</b>\r\n                          </th>\r\n                          <th class=\"smaller-blue teams\">\r\n                            <b>Title</b>\r\n                          </th>\r\n                          <th class=\"smaller-blue desc\">\r\n                            <b>Description</b>\r\n                          </th>\r\n                          <th class=\"task-circle\"></th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody *ngFor=\"let task of activeTaskService.userTasks | async\">\r\n                        <tr class=\"grey-text task-row\">\r\n                          <td class=\"text-center due small-font\">\r\n                            {{task.templateFieldsValues.priorTemplate.endDateTime}}\r\n                          </td>\r\n                          <td class=\"teams small-font\">{{task.title}}</td>\r\n                          <td class=\"desc small-font\">{{task.description}}</td>\r\n                          <td class=\"task-circle small-font\">\r\n                            <i class=\"fa fa-circle assigned-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'assigned'\"></i>\r\n                            <i class=\"fa fa-circle accepted-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'accepted'\"></i>\r\n                            <i class=\"fa fa-circle in-progress-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'in progress'\"></i>\r\n                            <i class=\"fa fa-circle paused-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'paused'\"></i>\r\n                          </td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div [hidden]=\"tab2\">\r\n\r\n                <p class=\"text-uppercase smaller-blue dark-grey-text\">archived tasks</p>\r\n                <div class=\"task-body\">\r\n                  <div class=\"row m-0 p-0 justify-content-center align-items-center text-center zero-count wow fadeIn\" *ngIf=\"completedTaskCount.getValue() === 0\">\r\n                    <div class=\"col-md-12 py-4\">\r\n                      <img src=\"../../../assets/svg/group.svg\" alt=\"Empty\">\r\n                      <h6 class=\"header-text\">No archived tasks</h6>\r\n                    </div>\r\n                  </div>\r\n                  <table class=\"table m-0\" *ngIf=\"completedTaskCount.getValue() !== 0\">\r\n                    <thead>\r\n                      <tr class=\"task-row\">\r\n                        <th class=\"smaller-blue due text-center\">\r\n                          <b>Date Due</b>\r\n                        </th>\r\n                        <th class=\"smaller-blue teams\">\r\n                          <b>Title</b>\r\n                        </th>\r\n                        <th class=\"smaller-blue desc\">\r\n                          <b>Description</b>\r\n                        </th>\r\n                        <th class=\"task-circle\"></th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody *ngFor=\"let task of archivedTaskService.userTasks | async\">\r\n                      <tr class=\"grey-text task-row\">\r\n                        <td class=\"text-center due small-font\">\r\n                          {{task.templateFieldsValues.priorTemplate.endDateTime}}\r\n                        </td>\r\n                        <td class=\"teams small-font\">{{task.title}}</td>\r\n                        <td class=\"desc small-font\">{{task.description}}</td>\r\n                        <td class=\"task-circle small-font\">\r\n                          <i class=\"fa fa-circle accepted-icon task-icon\"></i>\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n\r\n              <div [hidden]=\"tab3\">\r\n\r\n                <p class=\"text-uppercase smaller-blue dark-grey-text\">inactive tasks</p>\r\n                <div class=\"task-body\">\r\n                  <div class=\"row m-0 p-0 justify-content-center align-items-center text-center zero-count wow fadeIn\" *ngIf=\"declinedTaskCount.getValue() === 0\">\r\n                    <div class=\"col-md-12 py-4\">\r\n                      <img src=\"../../../assets/svg/group.svg\" alt=\"Empty\">\r\n                      <h6 class=\"header-text\">No in-active tasks</h6>\r\n                    </div>\r\n                  </div>\r\n                  <table class=\"table m-0\" *ngIf=\"declinedTaskCount.getValue() !== 0\">\r\n                    <thead>\r\n                      <tr class=\"task-row\">\r\n                        <th class=\"smaller-blue due text-center\">\r\n                          <b>Date Due</b>\r\n                        </th>\r\n                        <th class=\"smaller-blue teams\">\r\n                          <b>Title</b>\r\n                        </th>\r\n                        <th class=\"smaller-blue desc\">\r\n                          <b>Description</b>\r\n                        </th>\r\n                        <th class=\"task-circle\"></th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody *ngFor=\"let task of inactiveTaskService.userTasks | async\">\r\n                      <tr class=\"grey-text task-row\">\r\n                        <td class=\"text-center due small-font\">\r\n                          {{task.templateFieldsValues.priorTemplate.endDateTime}}\r\n                        </td>\r\n                        <td class=\"teams small-font\">{{task.title}}</td>\r\n                        <td class=\"desc small-font\">{{task.description}}</td>\r\n                        <td class=\"task-circle small-font\">\r\n                          <i class=\"fa fa-circle declined-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'declined'\"></i>\r\n                          <i class=\"fa fa-circle unassigned-icon task-icon\" *ngIf=\"task.status.toLowerCase() == 'unassigned'\"></i>\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n\r\n              <div [hidden]=\"tab4\">\r\n\r\n                <p class=\"text-uppercase smaller-blue dark-grey-text\">escalated tasks</p>\r\n                <div class=\"task-body\">\r\n                  <div class=\"row m-0 p-0 justify-content-center align-items-center text-center zero-count wow fadeIn\" *ngIf=\"escalatedTaskCount.getValue() === 0\">\r\n                    <div class=\"col-md-12 py-4\">\r\n                      <img src=\"../../../assets/svg/group.svg\" alt=\"Empty\">\r\n                      <h6 class=\"header-text\">No escalated tasks</h6>\r\n                    </div>\r\n                  </div>\r\n                  <table class=\"table m-0\" *ngIf=\"escalatedTaskCount.getValue() !== 0\">\r\n                    <thead>\r\n                      <tr class=\"task-row\">\r\n                        <th class=\"smaller-blue due text-center\">\r\n                          <b>Date Due</b>\r\n                        </th>\r\n                        <th class=\"smaller-blue teams\">\r\n                          <b>Title</b>\r\n                        </th>\r\n                        <th class=\"smaller-blue desc\">\r\n                          <b>Description</b>\r\n                        </th>\r\n                        <th class=\"task-circle\"></th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody *ngFor=\"let task of escalatedTaskService.userTasks | async\">\r\n                      <tr class=\"grey-text task-row\">\r\n                        <td class=\"text-center due small-font\">\r\n                          {{task.templateFieldsValues.priorTemplate.endDateTime}}\r\n                        </td>\r\n                        <td class=\"teams small-font\">{{task.title}}</td>\r\n                        <td class=\"desc small-font\">{{task.description}}</td>\r\n                        <td class=\"task-circle small-font\">\r\n                          <i class=\"fa fa-circle escalated-icon task-icon\"></i>\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n<div class=\"modal-container\">\r\n  <div mdbModal #changePassModal=\"mdb-modal\" class=\"modal fade\" id=\"\" tabindex=\"-1\" role=\"dialog\" [config]=\"{backdrop: true}\">\r\n    <div class=\"modal-dialog modal-sm\" role=\"document\">\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header semi-grey-bg p-4\">\r\n          <h4 class=\"dark-text w-100 mb-0\">Change Password</h4>\r\n        </div>\r\n        <div class=\"modal-body mb-0\">\r\n          <form #changePassForm=\"ngForm\">\r\n            <div class=\"row m-0\">\r\n              <div class=\"col-12\">\r\n\r\n                <div class=\"md-form\">\r\n                  <input type=\"password\" required id=\"oldPassword\" class=\"form-control\" [class.is-invalid]=\"showError\" name=\"oldPassword\" #oldPassword\r\n                    [(ngModel)]=\"passwords.oldPassword\" mdbActive>\r\n                  <label for=\"oldPassword\">Confirm Old Password</label>\r\n                </div>\r\n\r\n                <div class=\"md-form\">\r\n                  <input type=\"password\" required id=\"newPassword\" class=\"form-control\" [class.is-invalid]=\"showError\" name=\"newPassword\" #newPassword\r\n                    [(ngModel)]=\"passwords.newPassword\" mdbActive (ngModelChange)=\"comparePasswords()\">\r\n                  <label for=\"newPassword\">New Password</label>\r\n                </div>\r\n\r\n                <div class=\"md-form\">\r\n                  <input type=\"password\" required id=\"confirmNewPassword\" class=\"form-control\" [class.is-invalid]=\"errors.comparePassword\"\r\n                    name=\"confirmNewPassword\" [(ngModel)]=\"passwords.confirmNewPassword\" (ngModelChange)=\"comparePasswords()\"\r\n                    #confirmNewPassword mdbActive>\r\n                  <label for=\"confirmNewPassword\" [class.text-danger]=\"errors.comparePassword\">Confirm New Password</label>\r\n                </div>\r\n\r\n                <div *ngIf=\"errors.comparePassword\">\r\n                  <div [hidden]=\"!errors.comparePassword\" class=\"text-danger error my-1\">\r\n                    Passwords don't match\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n        <div class=\"btn-groupe w-100 d-flex justify-content-end col-12 py-2\">\r\n          <button class=\"btn text-uppercase\" (click)=\"closePasswordModal()\" mdbRippleRadius>Cancel</button>\r\n          <button class=\"btn text-uppercase\" (click)=\"changePassword()\" [disabled]=\"!changePassForm.form.valid || errors.comparePassword\"\r\n            mdbRippleRadius>Change</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"

/***/ }),

/***/ "../../../../../src/app/profile/profile.component.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".bold-text {\n  font-weight: bold; }\n\n.big-text {\n  margin: 0;\n  font-size: 14px; }\n\n.text-center {\n  text-align: center !important; }\n\n.normal-font {\n  font-size: 1rem; }\n\n.small-font {\n  font-size: 0.75rem; }\n\n.semi-dark-label {\n  font-weight: 500;\n  color: #676767; }\n\n.light-text {\n  color: #9a9a9a;\n  font-size: 12px; }\n\n.semi-dark-text {\n  color: #676767; }\n\n.medium-dark-text {\n  color: #000000;\n  font-size: 13px;\n  font-weight: 400; }\n\n.dark-text {\n  color: #000000;\n  font-size: 14px;\n  font-weight: 500; }\n\n.grey-text {\n  color: #9a9a9a !important;\n  font-size: 0.7rem; }\n\n.dark-grey-text {\n  color: #545353 !important; }\n\n.deep-blue-text {\n  color: #07417d !important; }\n\n.blue-text {\n  color: #004f91; }\n\n.dark-label {\n  font-weight: bold;\n  color: #000000; }\n\n.small-label {\n  font-size: 12px; }\n\n.light-bg {\n  background: #f7f7f7 !important; }\n\n.grey-bg {\n  background: #9a9a9a !important; }\n\n.semi-grey-bg {\n  background: #ededeb !important; }\n\n.semi-grey-bg-2 {\n  background: #e7e7e7 !important; }\n\n.light-grey-bg {\n  background: #f4f4f4 !important; }\n\n.bg-none {\n  background: none !important; }\n\n.my-1 {\n  padding: 0;\n  margin: 5px 5px 5px 15px; }\n\n.toleft {\n  margin-left: 13em; }\n\n.mt-c-m1 {\n  margin-top: -2em; }\n\n.no-pb {\n  padding-bottom: 0px !important; }\n\n.filler {\n  -webkit-box-flex: 1;\n      -ms-flex-positive: 1;\n          flex-grow: 1; }\n\n.v {\n  visibility: visible !important; }\n\n.fixed-action-btn {\n  bottom: 5vh;\n  right: 5vh; }\n\n.btn-floating {\n  background: #f27023;\n  width: 40px;\n  height: 40px; }\n\n.btn-floating .fa {\n    width: 100%; }\n\n.btn-group {\n  position: unset; }\n\n.btn-group a {\n    position: relative;\n    padding: 0.25rem 1rem;\n    padding-left: 0; }\n\n.btn-group a i {\n      position: absolute;\n      right: 6px;\n      top: 8px; }\n\n.btn-groupe .btn {\n  padding: 0.4rem;\n  margin: 0;\n  background: none;\n  border: none;\n  -webkit-box-shadow: none;\n          box-shadow: none;\n  font-size: 14px;\n  font-weight: 500;\n  color: #07417d !important; }\n\n.btn-flat {\n  padding: 8px 10px; }\n\n.btn-transparent {\n  color: #676767;\n  background: none;\n  border: none;\n  -webkit-box-shadow: none;\n          box-shadow: none;\n  -webkit-transition: 0.2s all;\n  transition: 0.2s all; }\n\n@media (max-width: 575px) {\n  .btn {\n    font-size: 0.6rem; }\n    .btn-floating {\n      right: 1px !important;\n      width: 37px;\n      height: 37px; } }\n\n.search-block {\n  background-color: #f7f7f7;\n  border-radius: 1px;\n  color: #a8a8a8; }\n\n.search-icon {\n  border: none;\n  background-color: #f7f7f7; }\n\n.search-input {\n  height: 100%;\n  margin: 0;\n  border: none;\n  background-color: #f7f7f7;\n  padding: 10px 10px 10px 0; }\n\n.search-input:focus {\n    border-bottom: none !important;\n    -webkit-box-shadow: none !important;\n            box-shadow: none !important; }\n\n.dropdown-toggle-sort {\n  background-color: #f7f7f7 !important;\n  color: #9a9a9a !important;\n  -webkit-box-shadow: none;\n          box-shadow: none; }\n\n.dropdown-toggle-sort:hover, .dropdown-toggle-sort:focus {\n    background-color: #f7f7f7 !important;\n    color: #9a9a9a !important; }\n\n.dropdown-item.active, .dropdown-item:active {\n  background-color: #f7f7f7 !important; }\n\nsmall.val-error {\n  font-size: 10px;\n  font-weight: 500;\n  line-height: 0.8;\n  position: relative;\n  top: 1px; }\n\n.map-modal {\n  margin-top: 15vh; }\n\n.map-modal agm-map {\n    height: 60vh; }\n\n.freq-badge {\n  font-size: 0.8rem;\n  text-align: center;\n  background: #e7e7e7;\n  color: #252525;\n  -webkit-box-shadow: none;\n          box-shadow: none;\n  border-radius: 500px;\n  font-weight: 500; }\n\n.rb {\n  border-right: 1px solid #d9d7d7; }\n\n.tb {\n  border-top: 1px solid #d9d7d7; }\n\n.modal-container ::ng-deep .modal {\n  overflow-y: auto !important; }\n\n.no-padding {\n  padding: 0 !important; }\n\n.confirm-modal h4 {\n  font-size: 16px;\n  color: #000;\n  font-weight: bold; }\n\n.confirm-modal p {\n  font-size: 12px;\n  color: #afafaf; }\n\n.modal-content--fixed {\n  position: fixed;\n  width: 100%;\n  margin-top: 40px !important;\n  overflow-y: hidden;\n  height: 80vh; }\n\n.modal-content .head-content {\n  width: 100%; }\n\n.modal-content .head-content .title-section {\n    width: 65%; }\n\n.modal-content .head-content .btn {\n    padding: 0.4rem;\n    background: none;\n    border: none;\n    -webkit-box-shadow: none;\n            box-shadow: none;\n    color: #676767; }\n\n.modal-content .head-content .btn:hover {\n      background: none !important; }\n\n.modal-content .head-content .btn .fa {\n      color: #676767 !important; }\n\n.modal-content .head-content .btn-section {\n      width: 35%; }\n\n.modal-content .error {\n  margin-left: -1.2em;\n  font-size: 70%; }\n\n.modal-body {\n  background: #f7f7f7; }\n\n.modal-body--fixed {\n    position: fixed;\n    margin-top: 65px;\n    overflow-y: scroll;\n    height: 100vh;\n    width: 100%; }\n\n.modal-container ::ng-deep .modal {\n  overflow-y: auto !important; }\n\n@media (max-width: 575px) {\n  .modal-content {\n    margin-top: 25px; }\n  .confirm-modal {\n    margin-top: 50px; }\n  .btn {\n    font-size: 0.6rem !important; } }\n\n@media (min-width: 576px) and (max-width: 767px) {\n  .modal-content {\n    margin-top: 25px; }\n  .confirm-modal {\n    margin-top: 50px; } }\n\n@media (min-width: 768px) {\n  .modal-content {\n    margin-top: 90px; }\n  .confirm-modal {\n    margin-top: 120px; } }\n\n.card-unassigned {\n  border-left: 5px solid #c80c24; }\n\n.card-assigned {\n  border-left: 5px solid #1ea9f4; }\n\n.card-declined {\n  border-left: 5px solid #f91e29; }\n\n.card-in-progress {\n  border-left: 5px solid #0d609c; }\n\n.card-pending-review {\n  border-left: 5px solid #f2ce4a; }\n\n.card-paused {\n  border-left: 5px solid #fba94a; }\n\n.card-done {\n  border-left: 5px solid #4caf50; }\n\n.card-accepted {\n  border-left: 5px solid #33db78; }\n\n.unassigned-icon {\n  color: #c80c24; }\n\n.assigned-icon {\n  color: #1ea9f4; }\n\n.declined-icon {\n  color: #f91e29; }\n\n.accepted-icon {\n  color: #33db78; }\n\n.in-progress-icon {\n  color: #0d609c; }\n\n.paused-icon {\n  color: #fba94a; }\n\n.pending-review-icon {\n  color: #f2ce4a; }\n\n.completed-icon {\n  color: #4caf50; }\n\n.alert-icon {\n  color: #Eb5757; }\n\n.profile {\n  background: #f4f4f4;\n  position: absolute;\n  top: 69px;\n  left: 0;\n  width: 100%;\n  height: 100%; }\n\n.tab-link {\n  cursor: pointer; }\n\n.profile-card {\n  -webkit-box-shadow: 0 7px 14px -4px rgba(0, 0, 0, 0.24);\n          box-shadow: 0 7px 14px -4px rgba(0, 0, 0, 0.24); }\n\n.profile-card-top {\n    background: #fbfbfb;\n    padding: 1.25rem;\n    border-top: 1px solid #ebebeb70; }\n\n.profile-card-right {\n    -webkit-box-shadow: 0 7px 14px -4px rgba(0, 0, 0, 0.5);\n            box-shadow: 0 7px 14px -4px rgba(0, 0, 0, 0.5); }\n\n.profile-card-right-top {\n      background: #ededeb;\n      padding: 0.5rem 0.8rem; }\n\n.profile-card-right-top .profile-icon {\n        width: 70px;\n        padding: 0; }\n\n.profile-card-right-top .profile-icon i {\n          font-size: 1.5rem; }\n\n.profile-card-right-top .profile-icon span {\n          font-weight: normal !important; }\n\n.card {\n  border-radius: 0.1rem !important; }\n\nhr {\n  border-top: 2px solid #eeeeee78; }\n\n.profile-name {\n  color: #666666;\n  font-size: 1.5rem; }\n\n.profile-name span {\n    font-weight: 900; }\n\n.change-password {\n  margin: 0px !important; }\n\n.blue-color {\n  color: #3ca3de; }\n\n.show-more {\n  cursor: pointer; }\n\n.indicator {\n  margin: 5px 0 0;\n  border: 2px solid #e8e8e8; }\n\n.indicator.active {\n    border: 2px solid #3ca3de; }\n\n.big-grey {\n  color: #828282;\n  font-size: 2.2rem; }\n\n.small-blue {\n  font-size: 0.8rem;\n  color: #3ca3de;\n  font-weight: bold; }\n\n.smaller-blue {\n  font-size: 0.75rem;\n  color: #3ca3de;\n  font-weight: bold; }\n\n.error {\n  font-size: 10px;\n  font-weight: 500; }\n\n.is-invalid:focus {\n  -webkit-box-shadow: 0 1px 0 0 #dc3545 !important;\n          box-shadow: 0 1px 0 0 #dc3545 !important;\n  border-bottom-color: #dc3545 !important; }\n\n.table td,\n.table th {\n  padding: 5px; }\n\n.task-body {\n  border: 1px solid #f2f2f2; }\n\n.numberCircle {\n  height: 30px;\n  width: 30px;\n  display: table-cell;\n  text-align: center;\n  vertical-align: middle;\n  border-radius: 50%;\n  text-align: center;\n  font-size: 12px;\n  background: #828282; }\n\n.phone-field {\n  width: 80%;\n  float: left; }\n\n.phone-edit {\n  float: left;\n  cursor: pointer; }\n\n.phone-edit i {\n    border: none; }\n\n.table th,\n.table td {\n  vertical-align: middle !important;\n  font-weight: 400 !important; }\n\n.task-title-bg {\n  background: #f5f5f3; }\n\n.task-row {\n  margin: 0 !important;\n  cursor: pointer; }\n\n.task-row .arrow {\n    width: 10% !important; }\n\n.task-row .due {\n    width: 15%; }\n\n.task-row .teams {\n    width: 20%; }\n\n.task-row .desc {\n    width: 45%; }\n\n.task-row .task-circle {\n    width: 7%; }\n\n.task-badge {\n  width: 10%; }\n\n.taskInactive .task-content {\n  display: none; }\n\n.zero-count {\n  min-height: 40vh; }\n\n.hideTaskPanel {\n  display: none; }\n\n.taskActive .task-content {\n  display: table-row-group; }\n\n.subTaskInactive .sub-task-content {\n  display: none; }\n\n.subTaskActive .sub-task-content {\n  display: table-row-group; }\n\n.viewAll {\n  cursor: pointer; }\n\n.tbl-accordion-nested {\n  width: 100%; }\n\n.tbl-accordion-nested td,\n  .tbl-accordion-nested th {\n    padding: 10px;\n    padding-left: 0.75rem;\n    padding-right: 0.75rem; }\n\n.tbl-accordion-nested .tbl-accordion-section {\n    cursor: pointer; }\n\n@media (max-width: 576px) {\n  .profile-image-con {\n    width: 220px;\n    height: 220px;\n    margin: 0 auto; }\n  .task-row .task-circle {\n    width: 2%; }\n  .task-badge {\n    width: 20%; } }\n\n@media (min-width: 576px) and (max-width: 768px) {\n  .profile-image-con {\n    width: 470px;\n    height: 470px;\n    margin: 0 auto; }\n  .task-row .task-circle {\n    width: 2%; }\n  .task-badge {\n    width: 20%; } }\n\n@media (min-width: 768px) and (max-width: 992px) {\n  .profile-image-con {\n    width: 95px;\n    height: 95px;\n    margin: 0 auto; }\n  .task-row .task-circle {\n    width: 2%; }\n  .task-badge {\n    width: 20%; } }\n\n@media (min-width: 992px) and (max-width: 1200px) {\n  .profile-image-con {\n    width: 140px;\n    height: 140px;\n    margin: 0 auto; } }\n\n@media (min-width: 1200px) {\n  .profile-image-con {\n    width: 190px;\n    height: 190px;\n    margin: 0 auto; } }\n\n.profile-image-con {\n  position: relative;\n  border-radius: 50%;\n  overflow: hidden;\n  cursor: pointer; }\n\n.profile-image-con .img {\n    width: 100%;\n    height: 100%;\n    -o-object-fit: cover;\n       object-fit: cover; }\n\n.profile-image-con .overlay {\n    position: absolute;\n    padding: 0 1rem;\n    height: 20%;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column;\n    text-align: center;\n    width: 100%;\n    background: rgba(0, 0, 0, 0.3);\n    color: #fff;\n    top: 80%;\n    -webkit-transition: 0.3s all;\n    transition: 0.3s all; }\n\n.profile-image-con .overlay .fa {\n      color: #3ca3de;\n      font-size: 1.2rem;\n      -webkit-transition: 0.4s all;\n      transition: 0.4s all;\n      display: inline-block;\n      width: 30px; }\n\n.profile-image-con .overlay .overlay-text {\n      font-size: 0.75rem;\n      opacity: 0;\n      -webkit-transition: 0.5s all;\n      transition: 0.5s all;\n      margin: 0;\n      display: none; }\n\n.profile-image-con:hover .overlay {\n    top: 0;\n    height: 100%; }\n\n.profile-image-con:hover .overlay .fa {\n      font-size: 1rem; }\n\n.profile-image-con:hover .overlay .overlay-text {\n      opacity: 1;\n      display: block; }\n\n.file-input {\n  display: none; }\n\n.modal-container ::ng-deep .modal {\n  overflow-y: auto !important; }\n\n.md-form {\n  margin: 0; }\n\n.md-form label {\n    top: 1.4rem;\n    font-size: 0.9rem; }\n\n.btn-groupe .btn {\n  padding: 0.4rem;\n  margin: 0;\n  background: none;\n  border: none;\n  -webkit-box-shadow: none;\n          box-shadow: none;\n  font-size: 14px;\n  font-weight: 500;\n  color: #07417d !important; }\n\n@media (max-width: 575px) {\n  .modal-content {\n    margin-top: 50px; } }\n\n@media (min-width: 576px) and (max-width: 767px) {\n  .modal-content {\n    margin-top: 50px; } }\n\n@media (min-width: 768px) {\n  .modal-content {\n    margin-top: 120px; } }\n", ""]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/app/profile/profile.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ProfileComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__shared_task_activetask_service__ = __webpack_require__("../../../../../src/app/shared/task/activetask.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_task_archived_task_service__ = __webpack_require__("../../../../../src/app/shared/task/archived-task.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_task_escalated_task_service__ = __webpack_require__("../../../../../src/app/shared/task/escalated-task.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__shared_task_inactivetask_service__ = __webpack_require__("../../../../../src/app/shared/task/inactivetask.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__typescripts_pro_preloader_preloader_service__ = __webpack_require__("../../../../../src/typescripts/pro/preloader/preloader.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__environments_environment__ = __webpack_require__("../../../../../src/environments/environment.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__shared_user_user__ = __webpack_require__("../../../../../src/app/shared/user/user.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shared_user_auth_service__ = __webpack_require__("../../../../../src/app/shared/user/auth.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__shared_role_role_service__ = __webpack_require__("../../../../../src/app/shared/role/role.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__shared_location_location_service__ = __webpack_require__("../../../../../src/app/shared/location/location.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__shared_team_team_service__ = __webpack_require__("../../../../../src/app/shared/team/team.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__shared_user_user_service__ = __webpack_require__("../../../../../src/app/shared/user/user.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__angular_core__ = __webpack_require__("../../../core/esm5/core.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_moment__ = __webpack_require__("../../../../moment/moment.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_moment__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_rxjs_BehaviorSubject__ = __webpack_require__("../../../../rxjs/_esm5/BehaviorSubject.js");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};















var ProfileComponent = (function () {
    function ProfileComponent(activeTaskService, archivedTaskService, escalatedTaskService, inactiveTaskService, authService, locationService, roleService, teamService, userService, mdbSpinningPreloader) {
        this.activeTaskService = activeTaskService;
        this.archivedTaskService = archivedTaskService;
        this.escalatedTaskService = escalatedTaskService;
        this.inactiveTaskService = inactiveTaskService;
        this.authService = authService;
        this.locationService = locationService;
        this.roleService = roleService;
        this.teamService = teamService;
        this.userService = userService;
        this.mdbSpinningPreloader = mdbSpinningPreloader;
        this.user = new __WEBPACK_IMPORTED_MODULE_6__shared_user_user__["a" /* User */]();
        this.teams = new __WEBPACK_IMPORTED_MODULE_14_rxjs_BehaviorSubject__["a" /* BehaviorSubject */]([]);
        this.roles = new __WEBPACK_IMPORTED_MODULE_14_rxjs_BehaviorSubject__["a" /* BehaviorSubject */]([]);
        this.teams = new __WEBPACK_IMPORTED_MODULE_14_rxjs_BehaviorSubject__["a" /* BehaviorSubject */]([]);
        this.assignedTaskCount = new __WEBPACK_IMPORTED_MODULE_14_rxjs_BehaviorSubject__["a" /* BehaviorSubject */](0);
        this.completedTaskCount = new __WEBPACK_IMPORTED_MODULE_14_rxjs_BehaviorSubject__["a" /* BehaviorSubject */](0);
        this.declinedTaskCount = new __WEBPACK_IMPORTED_MODULE_14_rxjs_BehaviorSubject__["a" /* BehaviorSubject */](0);
        this.escalatedTaskCount = new __WEBPACK_IMPORTED_MODULE_14_rxjs_BehaviorSubject__["a" /* BehaviorSubject */](0);
        this.assignedTasks = new __WEBPACK_IMPORTED_MODULE_14_rxjs_BehaviorSubject__["a" /* BehaviorSubject */]([]);
        this.archivedTasks = new __WEBPACK_IMPORTED_MODULE_14_rxjs_BehaviorSubject__["a" /* BehaviorSubject */]([]);
        this.declinedTasks = new __WEBPACK_IMPORTED_MODULE_14_rxjs_BehaviorSubject__["a" /* BehaviorSubject */]([]);
        this.escalatedTasks = new __WEBPACK_IMPORTED_MODULE_14_rxjs_BehaviorSubject__["a" /* BehaviorSubject */]([]);
        this.showContact = false;
        this.info = "more";
        this.makePhoneEditable = true;
        this.viewAllStatus = false;
        this.statusTitle = "View All";
        var formatTaskDate = __WEBPACK_IMPORTED_MODULE_13_moment__(1515772800000).format("DD MMM YYYY");
        this.passwords = {
            oldPassword: "",
            newPassword: "",
            confirmNewPassword: ""
        };
        this.errors = {
            newPassword: false,
            comparePassword: false,
            oldPassword: false
        };
        this.tab1 = false;
        this.tab2 = true;
        this.tab3 = true;
        this.tab4 = true;
    }
    ProfileComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.authService.getUserId()) {
            var loggedInUserId = this.authService.getUserId();
            this.userService.getUser(loggedInUserId).subscribe(function (res) {
                _this.user = res["data"];
            });
            this.activeTaskService.getUserTasks(loggedInUserId).subscribe();
            this.archivedTaskService.getUserTasks(loggedInUserId).subscribe();
            this.inactiveTaskService.getUserTasks(loggedInUserId).subscribe();
            this.escalatedTaskService.getUserTasks(loggedInUserId).subscribe();
            this.activeTaskService.userTasks.subscribe(function (data) {
                _this.assignedTaskCount.next(data.length);
                _this.assignedTasks.next(data);
            });
            this.archivedTaskService.userTasks.subscribe(function (data) {
                _this.completedTaskCount.next(data.length);
                _this.archivedTasks.next(data);
            });
            this.inactiveTaskService.userTasks.subscribe(function (data) {
                _this.declinedTaskCount.next(data.length);
                _this.declinedTasks.next(data);
            });
            this.escalatedTaskService.userTasks.subscribe(function (data) {
                _this.escalatedTaskCount.next(data.length);
                _this.escalatedTasks.next(data);
            });
        }
        this.roleService.roles.subscribe(function (roles) {
            _this.roles.next(roles.map(function (role) {
                return { value: role.userGroupId, label: role.name };
            }));
        });
        this.teamService.teams.subscribe(function (teams) {
            _this.teams.next(teams.map(function (team) {
                return { value: team.teamId, label: team.teamName };
            }));
        });
        this.activeTaskService.getUserTasks(this.user);
        this.mdbSpinningPreloader.stop();
    };
    ProfileComponent.prototype.getTaskCount = function () {
    };
    ProfileComponent.prototype.getUserGroupName = function (user) {
        if (user) {
            var group = this.roles.value.filter(function (v) {
                return v.value === user.userGroupId;
            });
            return group.length ? group[0].label : "N/A";
        }
    };
    ProfileComponent.prototype.getTeamNames = function (user) {
        var _this = this;
        if (user && user.teamIds) {
            var teams = user.teamIds
                .map(function (id) {
                return _this.teams.value
                    .filter(function (v) {
                    return v.value === id;
                })
                    .map(function (v) {
                    return v.label;
                })
                    .join(", ");
            })
                .filter(function (team) {
                return team.length > 0;
            })
                .join(", ");
            return teams.length > 0 ? teams : "N/A";
        }
    };
    ProfileComponent.prototype.getUserCountry = function (user) {
        if (user && user.stsData) {
            return user.stsData.UserCountry[0].IsoCode;
        }
    };
    ProfileComponent.prototype.uploadProfileImage = function (event) {
        var _this = this;
        var reader = new FileReader();
        var AWS = window.AWS;
        if (event.target.files && event.target.files.length > 0) {
            var file_1 = event.target.files[0];
            reader.readAsDataURL(file_1);
            reader.onload = function () {
                AWS.config.accessKeyId = __WEBPACK_IMPORTED_MODULE_5__environments_environment__["a" /* environment */].corona.s3Bucket.ACCESS_KEY_ID;
                AWS.config.secretAccessKey = __WEBPACK_IMPORTED_MODULE_5__environments_environment__["a" /* environment */].corona.s3Bucket.SECRET_ACCESS_KEY;
                var bucket = new AWS.S3({
                    params: { Bucket: __WEBPACK_IMPORTED_MODULE_5__environments_environment__["a" /* environment */].corona.s3Bucket.NAME }
                });
                var params = { Key: file_1.name, Body: file_1 };
                var imgUrl;
                imgUrl = "";
                var user = _this.user;
                var userService = _this.userService;
                bucket.upload(params, function (error, res) {
                    user.profilePicture = res.Location;
                    userService.createOrUpdateUser(user);
                });
            };
        }
    };
    ProfileComponent.prototype.updatePhoneNumber = function () {
        var user = this.user;
        this.userService.createOrUpdateUser(user);
        this.makePhoneEditable = !this.makePhoneEditable;
    };
    ProfileComponent.prototype.editPhoneNumber = function () {
        this.makePhoneEditable = !this.makePhoneEditable;
    };
    ProfileComponent.prototype.gotoTab = function (id) {
        if (id === 1) {
            this.tab1 = false;
            this.tab2 = true;
            this.tab3 = true;
            this.tab4 = true;
        }
        else if (id === 2) {
            this.tab1 = true;
            this.tab2 = false;
            this.tab3 = true;
            this.tab4 = true;
        }
        else if (id === 3) {
            this.tab1 = true;
            this.tab2 = true;
            this.tab3 = false;
            this.tab4 = true;
        }
        else if (id === 4) {
            this.tab1 = true;
            this.tab2 = true;
            this.tab3 = true;
            this.tab4 = false;
        }
    };
    ProfileComponent.prototype.getFullName = function () {
        return this.user.firstName + " " + this.user.lastName;
    };
    ProfileComponent.prototype.openPasswordModal = function () {
        this.changePassModal.show();
    };
    ProfileComponent.prototype.closePasswordModal = function () {
        this.changePassModal.hide();
    };
    ProfileComponent.prototype.comparePasswords = function () {
        if (this.passwords.newPassword !== "" &&
            this.passwords.confirmNewPassword !== "" &&
            this.passwords.confirmNewPassword !== this.passwords.newPassword) {
            return (this.errors.comparePassword = true);
        }
        return (this.errors.comparePassword = false);
    };
    ProfileComponent.prototype.changePassword = function () {
        this.authService.changePassword(this.passwords.oldPassword, this.passwords.newPassword);
    };
    ProfileComponent.prototype.contactInfoToggle = function () {
        this.showContact = !this.showContact;
        this.info = this.showContact === true ? "less" : "more";
    };
    ProfileComponent.prototype.toggleTask = function (newValue) {
        this.highlightedTask = this.highlightedTask === newValue ? 0 : newValue;
    };
    ProfileComponent.prototype.viewAllActiveTasks = function () {
        this.viewAllStatus = !this.viewAllStatus;
        if (!this.viewAllStatus) {
            this.statusTitle = "View All";
        }
        else {
            this.statusTitle = "Cancel";
        }
    };
    ProfileComponent.prototype.formatTaskDate = function (value) {
        return __WEBPACK_IMPORTED_MODULE_13_moment__(value).format("DD MMM YYYY hh:mm a");
    };
    ProfileComponent.prototype.toggleSubTask = function (newValue) {
        this.toggleTask(4);
        this.subHighlightedTask = this.subHighlightedTask === newValue ? 0 : newValue;
    };
    __decorate([
        Object(__WEBPACK_IMPORTED_MODULE_12__angular_core__["_12" /* ViewChild */])("changePassModal"),
        __metadata("design:type", Object)
    ], ProfileComponent.prototype, "changePassModal", void 0);
    __decorate([
        Object(__WEBPACK_IMPORTED_MODULE_12__angular_core__["_12" /* ViewChild */])("changePassForm"),
        __metadata("design:type", Object)
    ], ProfileComponent.prototype, "changePassForm", void 0);
    ProfileComponent = __decorate([
        Object(__WEBPACK_IMPORTED_MODULE_12__angular_core__["n" /* Component */])({
            selector: "app-profile",
            template: __webpack_require__("../../../../../src/app/profile/profile.component.html"),
            styles: [__webpack_require__("../../../../../src/app/profile/profile.component.scss")]
        }),
        __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_0__shared_task_activetask_service__["a" /* ActiveTaskService */],
            __WEBPACK_IMPORTED_MODULE_1__shared_task_archived_task_service__["a" /* ArchivedTaskService */],
            __WEBPACK_IMPORTED_MODULE_2__shared_task_escalated_task_service__["a" /* EscalatedTaskService */],
            __WEBPACK_IMPORTED_MODULE_3__shared_task_inactivetask_service__["a" /* InactiveTaskService */],
            __WEBPACK_IMPORTED_MODULE_7__shared_user_auth_service__["a" /* AuthService */],
            __WEBPACK_IMPORTED_MODULE_9__shared_location_location_service__["a" /* LocationService */],
            __WEBPACK_IMPORTED_MODULE_8__shared_role_role_service__["a" /* RoleService */],
            __WEBPACK_IMPORTED_MODULE_10__shared_team_team_service__["a" /* TeamService */],
            __WEBPACK_IMPORTED_MODULE_11__shared_user_user_service__["a" /* UserService */],
            __WEBPACK_IMPORTED_MODULE_4__typescripts_pro_preloader_preloader_service__["a" /* MDBSpinningPreloader */]])
    ], ProfileComponent);
    return ProfileComponent;
}());



/***/ }),

/***/ "../../../../../src/app/profile/profile.module.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "routes", function() { return routes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProfileModule", function() { return ProfileModule; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_app_shared_shared_module__ = __webpack_require__("../../../../../src/app/shared/shared.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__("../../../core/esm5/core.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_router__ = __webpack_require__("../../../router/esm5/router.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_app_profile_profile_component__ = __webpack_require__("../../../../../src/app/profile/profile.component.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};




var routes = [{ path: "", component: __WEBPACK_IMPORTED_MODULE_3_app_profile_profile_component__["a" /* ProfileComponent */] }];
var ProfileModule = (function () {
    function ProfileModule() {
    }
    ProfileModule = __decorate([
        Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__["K" /* NgModule */])({
            imports: [__WEBPACK_IMPORTED_MODULE_0_app_shared_shared_module__["a" /* SharedModule */], __WEBPACK_IMPORTED_MODULE_2__angular_router__["f" /* RouterModule */].forChild(routes)],
            declarations: [__WEBPACK_IMPORTED_MODULE_3_app_profile_profile_component__["a" /* ProfileComponent */]],
            schemas: [__WEBPACK_IMPORTED_MODULE_1__angular_core__["J" /* NO_ERRORS_SCHEMA */]]
        })
    ], ProfileModule);
    return ProfileModule;
}());



/***/ })

});
//# sourceMappingURL=profile.module.chunk.js.map